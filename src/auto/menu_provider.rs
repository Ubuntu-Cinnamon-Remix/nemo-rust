// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use crate::FileInfo;
use crate::MenuItem;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "NemoMenuProvider")]
    pub struct MenuProvider(Interface<ffi::NemoMenuProvider>);

    match fn {
        type_ => || ffi::nemo_menu_provider_get_type(),
    }
}

impl MenuProvider {
        pub const NONE: Option<&'static MenuProvider> = None;
    
}

pub trait MenuProviderExt: 'static {
    #[doc(alias = "nemo_menu_provider_emit_items_updated_signal")]
    fn emit_items_updated_signal(&self);

    #[doc(alias = "nemo_menu_provider_get_background_items")]
    #[doc(alias = "get_background_items")]
    fn background_items(&self, window: &impl IsA<gtk::Widget>, current_folder: &impl IsA<FileInfo>) -> Vec<MenuItem>;

    #[doc(alias = "nemo_menu_provider_get_file_items")]
    #[doc(alias = "get_file_items")]
    fn file_items(&self, window: &impl IsA<gtk::Widget>, files: &[FileInfo]) -> Vec<MenuItem>;

    #[doc(alias = "items-updated")]
    fn connect_items_updated<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<MenuProvider>> MenuProviderExt for O {
    fn emit_items_updated_signal(&self) {
        unsafe {
            ffi::nemo_menu_provider_emit_items_updated_signal(self.as_ref().to_glib_none().0);
        }
    }

    fn background_items(&self, window: &impl IsA<gtk::Widget>, current_folder: &impl IsA<FileInfo>) -> Vec<MenuItem> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::nemo_menu_provider_get_background_items(self.as_ref().to_glib_none().0, window.as_ref().to_glib_none().0, current_folder.as_ref().to_glib_none().0))
        }
    }

    fn file_items(&self, window: &impl IsA<gtk::Widget>, files: &[FileInfo]) -> Vec<MenuItem> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::nemo_menu_provider_get_file_items(self.as_ref().to_glib_none().0, window.as_ref().to_glib_none().0, files.to_glib_none().0))
        }
    }

    fn connect_items_updated<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn items_updated_trampoline<P: IsA<MenuProvider>, F: Fn(&P) + 'static>(this: *mut ffi::NemoMenuProvider, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(MenuProvider::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"items-updated\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(items_updated_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for MenuProvider {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("MenuProvider")
    }
}
