// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use crate::Menu;
use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::ToValue;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "NemoMenuItem")]
    pub struct MenuItem(Object<ffi::NemoMenuItem, ffi::NemoMenuItemClass>);

    match fn {
        type_ => || ffi::nemo_menu_item_get_type(),
    }
}

impl MenuItem {
    #[doc(alias = "nemo_menu_item_new")]
    pub fn new(name: &str, label: &str, tip: &str, icon: &str) -> MenuItem {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::nemo_menu_item_new(name.to_glib_none().0, label.to_glib_none().0, tip.to_glib_none().0, icon.to_glib_none().0))
        }
    }

    #[doc(alias = "nemo_menu_item_new_separator")]
    pub fn new_separator(name: &str) -> MenuItem {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::nemo_menu_item_new_separator(name.to_glib_none().0))
        }
    }

    #[doc(alias = "nemo_menu_item_new_widget")]
    pub fn new_widget(name: &str, widget_a: &impl IsA<gtk::Widget>, widget_b: &impl IsA<gtk::Widget>) -> MenuItem {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::nemo_menu_item_new_widget(name.to_glib_none().0, widget_a.as_ref().to_glib_none().0, widget_b.as_ref().to_glib_none().0))
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`MenuItem`] objects.
            ///
            /// This method returns an instance of [`MenuItemBuilder`](crate::builders::MenuItemBuilder) which can be used to create [`MenuItem`] objects.
            pub fn builder() -> MenuItemBuilder {
                MenuItemBuilder::default()
            }
        

    #[doc(alias = "nemo_menu_item_activate")]
    pub fn activate(&self) {
        unsafe {
            ffi::nemo_menu_item_activate(self.to_glib_none().0);
        }
    }

    #[doc(alias = "nemo_menu_item_set_submenu")]
    pub fn set_submenu(&self, menu: &Menu) {
        unsafe {
            ffi::nemo_menu_item_set_submenu(self.to_glib_none().0, menu.to_glib_none().0);
        }
    }

    #[doc(alias = "nemo_menu_item_set_widget_a")]
    pub fn set_widget_a(&self, widget: &impl IsA<gtk::Widget>) {
        unsafe {
            ffi::nemo_menu_item_set_widget_a(self.to_glib_none().0, widget.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "nemo_menu_item_set_widget_b")]
    pub fn set_widget_b(&self, widget: &impl IsA<gtk::Widget>) {
        unsafe {
            ffi::nemo_menu_item_set_widget_b(self.to_glib_none().0, widget.as_ref().to_glib_none().0);
        }
    }

    pub fn icon(&self) -> Option<glib::GString> {
        glib::ObjectExt::property(self, "icon")
    }

    pub fn set_icon(&self, icon: Option<&str>) {
        glib::ObjectExt::set_property(self,"icon", &icon)
    }

    pub fn label(&self) -> Option<glib::GString> {
        glib::ObjectExt::property(self, "label")
    }

    pub fn set_label(&self, label: Option<&str>) {
        glib::ObjectExt::set_property(self,"label", &label)
    }

    pub fn menu(&self) -> Option<Menu> {
        glib::ObjectExt::property(self, "menu")
    }

    pub fn set_menu(&self, menu: Option<&Menu>) {
        glib::ObjectExt::set_property(self,"menu", &menu)
    }

    pub fn name(&self) -> Option<glib::GString> {
        glib::ObjectExt::property(self, "name")
    }

    pub fn is_priority(&self) -> bool {
        glib::ObjectExt::property(self, "priority")
    }

    pub fn set_priority(&self, priority: bool) {
        glib::ObjectExt::set_property(self,"priority", &priority)
    }

    pub fn is_sensitive(&self) -> bool {
        glib::ObjectExt::property(self, "sensitive")
    }

    pub fn set_sensitive(&self, sensitive: bool) {
        glib::ObjectExt::set_property(self,"sensitive", &sensitive)
    }

    pub fn is_separator(&self) -> bool {
        glib::ObjectExt::property(self, "separator")
    }

    pub fn set_separator(&self, separator: bool) {
        glib::ObjectExt::set_property(self,"separator", &separator)
    }

    pub fn tip(&self) -> Option<glib::GString> {
        glib::ObjectExt::property(self, "tip")
    }

    pub fn set_tip(&self, tip: Option<&str>) {
        glib::ObjectExt::set_property(self,"tip", &tip)
    }

    #[doc(alias = "widget-a")]
    pub fn widget_a(&self) -> Option<gtk::Widget> {
        glib::ObjectExt::property(self, "widget-a")
    }

    #[doc(alias = "widget-b")]
    pub fn widget_b(&self) -> Option<gtk::Widget> {
        glib::ObjectExt::property(self, "widget-b")
    }

    #[doc(alias = "nemo_menu_item_list_free")]
    pub fn list_free(item_list: &[MenuItem]) {
        assert_initialized_main_thread!();
        unsafe {
            ffi::nemo_menu_item_list_free(item_list.to_glib_none().0);
        }
    }

    #[doc(alias = "activate")]
    pub fn connect_activate<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn activate_trampoline<F: Fn(&MenuItem) + 'static>(this: *mut ffi::NemoMenuItem, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"activate\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(activate_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "icon")]
    pub fn connect_icon_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_icon_trampoline<F: Fn(&MenuItem) + 'static>(this: *mut ffi::NemoMenuItem, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::icon\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_icon_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "label")]
    pub fn connect_label_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_label_trampoline<F: Fn(&MenuItem) + 'static>(this: *mut ffi::NemoMenuItem, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::label\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_label_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "menu")]
    pub fn connect_menu_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_menu_trampoline<F: Fn(&MenuItem) + 'static>(this: *mut ffi::NemoMenuItem, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::menu\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_menu_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "priority")]
    pub fn connect_priority_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_priority_trampoline<F: Fn(&MenuItem) + 'static>(this: *mut ffi::NemoMenuItem, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::priority\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_priority_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "sensitive")]
    pub fn connect_sensitive_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_sensitive_trampoline<F: Fn(&MenuItem) + 'static>(this: *mut ffi::NemoMenuItem, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::sensitive\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_sensitive_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "separator")]
    pub fn connect_separator_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_separator_trampoline<F: Fn(&MenuItem) + 'static>(this: *mut ffi::NemoMenuItem, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::separator\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_separator_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "tip")]
    pub fn connect_tip_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_tip_trampoline<F: Fn(&MenuItem) + 'static>(this: *mut ffi::NemoMenuItem, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::tip\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_tip_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "widget-a")]
    pub fn connect_widget_a_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_widget_a_trampoline<F: Fn(&MenuItem) + 'static>(this: *mut ffi::NemoMenuItem, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::widget-a\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_widget_a_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "widget-b")]
    pub fn connect_widget_b_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_widget_b_trampoline<F: Fn(&MenuItem) + 'static>(this: *mut ffi::NemoMenuItem, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::widget-b\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_widget_b_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl Default for MenuItem {
                     fn default() -> Self {
                         glib::object::Object::new::<Self>(&[])
                     }
                 }

#[derive(Clone, Default)]
// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`MenuItem`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct MenuItemBuilder {
    icon: Option<String>,
    label: Option<String>,
    menu: Option<Menu>,
    name: Option<String>,
    priority: Option<bool>,
    sensitive: Option<bool>,
    separator: Option<bool>,
    tip: Option<String>,
    widget_a: Option<gtk::Widget>,
    widget_b: Option<gtk::Widget>,
}

impl MenuItemBuilder {
    // rustdoc-stripper-ignore-next
    /// Create a new [`MenuItemBuilder`].
    pub fn new() -> Self {
        Self::default()
    }


    // rustdoc-stripper-ignore-next
    /// Build the [`MenuItem`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> MenuItem {
        let mut properties: Vec<(&str, &dyn ToValue)> = vec![];
if let Some(ref icon) = self.icon {
                properties.push(("icon", icon));
            }
if let Some(ref label) = self.label {
                properties.push(("label", label));
            }
if let Some(ref menu) = self.menu {
                properties.push(("menu", menu));
            }
if let Some(ref name) = self.name {
                properties.push(("name", name));
            }
if let Some(ref priority) = self.priority {
                properties.push(("priority", priority));
            }
if let Some(ref sensitive) = self.sensitive {
                properties.push(("sensitive", sensitive));
            }
if let Some(ref separator) = self.separator {
                properties.push(("separator", separator));
            }
if let Some(ref tip) = self.tip {
                properties.push(("tip", tip));
            }
if let Some(ref widget_a) = self.widget_a {
                properties.push(("widget-a", widget_a));
            }
if let Some(ref widget_b) = self.widget_b {
                properties.push(("widget-b", widget_b));
            }
        glib::Object::new::<MenuItem>(&properties)

    }

    pub fn icon(mut self, icon: &str) -> Self {
        self.icon = Some(icon.to_string());
        self
    }

    pub fn label(mut self, label: &str) -> Self {
        self.label = Some(label.to_string());
        self
    }

    pub fn menu(mut self, menu: &Menu) -> Self {
        self.menu = Some(menu.clone());
        self
    }

    pub fn name(mut self, name: &str) -> Self {
        self.name = Some(name.to_string());
        self
    }

    pub fn priority(mut self, priority: bool) -> Self {
        self.priority = Some(priority);
        self
    }

    pub fn sensitive(mut self, sensitive: bool) -> Self {
        self.sensitive = Some(sensitive);
        self
    }

    pub fn separator(mut self, separator: bool) -> Self {
        self.separator = Some(separator);
        self
    }

    pub fn tip(mut self, tip: &str) -> Self {
        self.tip = Some(tip.to_string());
        self
    }

    pub fn widget_a(mut self, widget_a: &impl IsA<gtk::Widget>) -> Self {
        self.widget_a = Some(widget_a.clone().upcast());
        self
    }

    pub fn widget_b(mut self, widget_b: &impl IsA<gtk::Widget>) -> Self {
        self.widget_b = Some(widget_b.clone().upcast());
        self
    }
}

impl fmt::Display for MenuItem {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("MenuItem")
    }
}
