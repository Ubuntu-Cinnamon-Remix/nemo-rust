// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use glib::object::Cast;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::ToValue;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "NemoColumn")]
    pub struct Column(Object<ffi::NemoColumn, ffi::NemoColumnClass>);

    match fn {
        type_ => || ffi::nemo_column_get_type(),
    }
}

impl Column {
    #[doc(alias = "nemo_column_new")]
    pub fn new(name: &str, attribute: &str, label: &str, description: &str) -> Column {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::nemo_column_new(name.to_glib_none().0, attribute.to_glib_none().0, label.to_glib_none().0, description.to_glib_none().0))
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`Column`] objects.
            ///
            /// This method returns an instance of [`ColumnBuilder`](crate::builders::ColumnBuilder) which can be used to create [`Column`] objects.
            pub fn builder() -> ColumnBuilder {
                ColumnBuilder::default()
            }
        

    pub fn attribute(&self) -> Option<glib::GString> {
        glib::ObjectExt::property(self, "attribute")
    }

    pub fn set_attribute(&self, attribute: Option<&str>) {
        glib::ObjectExt::set_property(self,"attribute", &attribute)
    }

    #[doc(alias = "attribute-q")]
    pub fn attribute_q(&self) -> u32 {
        glib::ObjectExt::property(self, "attribute-q")
    }

    pub fn description(&self) -> Option<glib::GString> {
        glib::ObjectExt::property(self, "description")
    }

    pub fn set_description(&self, description: Option<&str>) {
        glib::ObjectExt::set_property(self,"description", &description)
    }

    pub fn ellipsize(&self) -> pango::EllipsizeMode {
        glib::ObjectExt::property(self, "ellipsize")
    }

    pub fn set_ellipsize(&self, ellipsize: pango::EllipsizeMode) {
        glib::ObjectExt::set_property(self,"ellipsize", &ellipsize)
    }

    pub fn label(&self) -> Option<glib::GString> {
        glib::ObjectExt::property(self, "label")
    }

    pub fn set_label(&self, label: Option<&str>) {
        glib::ObjectExt::set_property(self,"label", &label)
    }

    pub fn name(&self) -> Option<glib::GString> {
        glib::ObjectExt::property(self, "name")
    }

    #[doc(alias = "width-chars")]
    pub fn width_chars(&self) -> i32 {
        glib::ObjectExt::property(self, "width-chars")
    }

    #[doc(alias = "width-chars")]
    pub fn set_width_chars(&self, width_chars: i32) {
        glib::ObjectExt::set_property(self,"width-chars", &width_chars)
    }

    pub fn xalign(&self) -> f32 {
        glib::ObjectExt::property(self, "xalign")
    }

    pub fn set_xalign(&self, xalign: f32) {
        glib::ObjectExt::set_property(self,"xalign", &xalign)
    }

    #[doc(alias = "nemo_column_new2")]
    pub fn new2(name: &str, attribute: &str, label: &str, description: &str, width_chars: i32, ellipsize: pango::EllipsizeMode) -> Option<Column> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::nemo_column_new2(name.to_glib_none().0, attribute.to_glib_none().0, label.to_glib_none().0, description.to_glib_none().0, width_chars, ellipsize.into_glib()))
        }
    }

    #[doc(alias = "attribute")]
    pub fn connect_attribute_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_attribute_trampoline<F: Fn(&Column) + 'static>(this: *mut ffi::NemoColumn, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::attribute\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_attribute_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "attribute-q")]
    pub fn connect_attribute_q_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_attribute_q_trampoline<F: Fn(&Column) + 'static>(this: *mut ffi::NemoColumn, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::attribute-q\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_attribute_q_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "description")]
    pub fn connect_description_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_description_trampoline<F: Fn(&Column) + 'static>(this: *mut ffi::NemoColumn, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::description\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_description_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "ellipsize")]
    pub fn connect_ellipsize_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_ellipsize_trampoline<F: Fn(&Column) + 'static>(this: *mut ffi::NemoColumn, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::ellipsize\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_ellipsize_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "label")]
    pub fn connect_label_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_label_trampoline<F: Fn(&Column) + 'static>(this: *mut ffi::NemoColumn, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::label\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_label_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "width-chars")]
    pub fn connect_width_chars_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_width_chars_trampoline<F: Fn(&Column) + 'static>(this: *mut ffi::NemoColumn, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::width-chars\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_width_chars_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "xalign")]
    pub fn connect_xalign_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_xalign_trampoline<F: Fn(&Column) + 'static>(this: *mut ffi::NemoColumn, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::xalign\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_xalign_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl Default for Column {
                     fn default() -> Self {
                         glib::object::Object::new::<Self>(&[])
                     }
                 }

#[derive(Clone, Default)]
// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`Column`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct ColumnBuilder {
    attribute: Option<String>,
    description: Option<String>,
    ellipsize: Option<pango::EllipsizeMode>,
    label: Option<String>,
    name: Option<String>,
    width_chars: Option<i32>,
    xalign: Option<f32>,
}

impl ColumnBuilder {
    // rustdoc-stripper-ignore-next
    /// Create a new [`ColumnBuilder`].
    pub fn new() -> Self {
        Self::default()
    }


    // rustdoc-stripper-ignore-next
    /// Build the [`Column`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Column {
        let mut properties: Vec<(&str, &dyn ToValue)> = vec![];
if let Some(ref attribute) = self.attribute {
                properties.push(("attribute", attribute));
            }
if let Some(ref description) = self.description {
                properties.push(("description", description));
            }
if let Some(ref ellipsize) = self.ellipsize {
                properties.push(("ellipsize", ellipsize));
            }
if let Some(ref label) = self.label {
                properties.push(("label", label));
            }
if let Some(ref name) = self.name {
                properties.push(("name", name));
            }
if let Some(ref width_chars) = self.width_chars {
                properties.push(("width-chars", width_chars));
            }
if let Some(ref xalign) = self.xalign {
                properties.push(("xalign", xalign));
            }
        glib::Object::new::<Column>(&properties)

    }

    pub fn attribute(mut self, attribute: &str) -> Self {
        self.attribute = Some(attribute.to_string());
        self
    }

    pub fn description(mut self, description: &str) -> Self {
        self.description = Some(description.to_string());
        self
    }

    pub fn ellipsize(mut self, ellipsize: pango::EllipsizeMode) -> Self {
        self.ellipsize = Some(ellipsize);
        self
    }

    pub fn label(mut self, label: &str) -> Self {
        self.label = Some(label.to_string());
        self
    }

    pub fn name(mut self, name: &str) -> Self {
        self.name = Some(name.to_string());
        self
    }

    pub fn width_chars(mut self, width_chars: i32) -> Self {
        self.width_chars = Some(width_chars);
        self
    }

    pub fn xalign(mut self, xalign: f32) -> Self {
        self.xalign = Some(xalign);
        self
    }
}

impl fmt::Display for Column {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Column")
    }
}
