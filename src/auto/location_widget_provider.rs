// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "NemoLocationWidgetProvider")]
    pub struct LocationWidgetProvider(Interface<ffi::NemoLocationWidgetProvider>);

    match fn {
        type_ => || ffi::nemo_location_widget_provider_get_type(),
    }
}

impl LocationWidgetProvider {
        pub const NONE: Option<&'static LocationWidgetProvider> = None;
    
}

pub trait LocationWidgetProviderExt: 'static {
    #[doc(alias = "nemo_location_widget_provider_get_widget")]
    #[doc(alias = "get_widget")]
    fn widget(&self, uri: &str, window: &impl IsA<gtk::Widget>) -> Option<gtk::Widget>;
}

impl<O: IsA<LocationWidgetProvider>> LocationWidgetProviderExt for O {
    fn widget(&self, uri: &str, window: &impl IsA<gtk::Widget>) -> Option<gtk::Widget> {
        unsafe {
            from_glib_none(ffi::nemo_location_widget_provider_get_widget(self.as_ref().to_glib_none().0, uri.to_glib_none().0, window.as_ref().to_glib_none().0))
        }
    }
}

impl fmt::Display for LocationWidgetProvider {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("LocationWidgetProvider")
    }
}
