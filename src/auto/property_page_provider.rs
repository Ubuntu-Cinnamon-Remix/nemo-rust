// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use crate::FileInfo;
use crate::PropertyPage;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "NemoPropertyPageProvider")]
    pub struct PropertyPageProvider(Interface<ffi::NemoPropertyPageProvider>);

    match fn {
        type_ => || ffi::nemo_property_page_provider_get_type(),
    }
}

impl PropertyPageProvider {
        pub const NONE: Option<&'static PropertyPageProvider> = None;
    
}

pub trait PropertyPageProviderExt: 'static {
    #[doc(alias = "nemo_property_page_provider_get_pages")]
    #[doc(alias = "get_pages")]
    fn pages(&self, files: &[FileInfo]) -> Vec<PropertyPage>;
}

impl<O: IsA<PropertyPageProvider>> PropertyPageProviderExt for O {
    fn pages(&self, files: &[FileInfo]) -> Vec<PropertyPage> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::nemo_property_page_provider_get_pages(self.as_ref().to_glib_none().0, files.to_glib_none().0))
        }
    }
}

impl fmt::Display for PropertyPageProvider {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("PropertyPageProvider")
    }
}
