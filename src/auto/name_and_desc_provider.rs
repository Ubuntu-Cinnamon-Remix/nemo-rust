// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use glib::object::IsA;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "NemoNameAndDescProvider")]
    pub struct NameAndDescProvider(Interface<ffi::NemoNameAndDescProvider>);

    match fn {
        type_ => || ffi::nemo_name_and_desc_provider_get_type(),
    }
}

impl NameAndDescProvider {
        pub const NONE: Option<&'static NameAndDescProvider> = None;
    
}

pub trait NameAndDescProviderExt: 'static {
    //#[doc(alias = "nemo_name_and_desc_provider_get_name_and_desc")]
    //#[doc(alias = "get_name_and_desc")]
    //fn name_and_desc(&self) -> /*Unimplemented*/Option<List TypeId { ns_id: 0, id: 10 }>;
}

impl<O: IsA<NameAndDescProvider>> NameAndDescProviderExt for O {
    //fn name_and_desc(&self) -> /*Unimplemented*/Option<List TypeId { ns_id: 0, id: 10 }> {
    //    unsafe { TODO: call ffi:nemo_name_and_desc_provider_get_name_and_desc() }
    //}
}

impl fmt::Display for NameAndDescProvider {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("NameAndDescProvider")
    }
}
