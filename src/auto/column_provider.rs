// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use crate::Column;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "NemoColumnProvider")]
    pub struct ColumnProvider(Interface<ffi::NemoColumnProvider>);

    match fn {
        type_ => || ffi::nemo_column_provider_get_type(),
    }
}

impl ColumnProvider {
        pub const NONE: Option<&'static ColumnProvider> = None;
    
}

pub trait ColumnProviderExt: 'static {
    #[doc(alias = "nemo_column_provider_get_columns")]
    #[doc(alias = "get_columns")]
    fn columns(&self) -> Vec<Column>;
}

impl<O: IsA<ColumnProvider>> ColumnProviderExt for O {
    fn columns(&self) -> Vec<Column> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::nemo_column_provider_get_columns(self.as_ref().to_glib_none().0))
        }
    }
}

impl fmt::Display for ColumnProvider {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("ColumnProvider")
    }
}
