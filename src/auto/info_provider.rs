// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use glib::object::IsA;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "NemoInfoProvider")]
    pub struct InfoProvider(Interface<ffi::NemoInfoProvider>);

    match fn {
        type_ => || ffi::nemo_info_provider_get_type(),
    }
}

impl InfoProvider {
        pub const NONE: Option<&'static InfoProvider> = None;
    

    //#[doc(alias = "nemo_info_provider_update_complete_invoke")]
    //pub fn update_complete_invoke(update_complete: &glib::Closure, provider: &impl IsA<InfoProvider>, handle: /*Ignored*/&mut OperationHandle, result: OperationResult) {
    //    unsafe { TODO: call ffi:nemo_info_provider_update_complete_invoke() }
    //}
}

pub trait InfoProviderExt: 'static {
    //#[doc(alias = "nemo_info_provider_cancel_update")]
    //fn cancel_update(&self, handle: /*Ignored*/&mut OperationHandle);

    //#[doc(alias = "nemo_info_provider_update_file_info")]
    //fn update_file_info(&self, file: &impl IsA<FileInfo>, update_complete: &glib::Closure, handle: /*Ignored*/&mut OperationHandle) -> OperationResult;
}

impl<O: IsA<InfoProvider>> InfoProviderExt for O {
    //fn cancel_update(&self, handle: /*Ignored*/&mut OperationHandle) {
    //    unsafe { TODO: call ffi:nemo_info_provider_cancel_update() }
    //}

    //fn update_file_info(&self, file: &impl IsA<FileInfo>, update_complete: &glib::Closure, handle: /*Ignored*/&mut OperationHandle) -> OperationResult {
    //    unsafe { TODO: call ffi:nemo_info_provider_update_file_info() }
    //}
}

impl fmt::Display for InfoProvider {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("InfoProvider")
    }
}
